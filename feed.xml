<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-12-29T23:25:31-06:00</updated><id>/feed.xml</id><entry><title type="html">Genuary 2021 Art</title><link href="/2021/01/31/genuary-2021.html" rel="alternate" type="text/html" title="Genuary 2021 Art" /><published>2021-01-31T00:00:00-06:00</published><updated>2021-01-31T00:00:00-06:00</updated><id>/2021/01/31/genuary-2021</id><content type="html" xml:base="/2021/01/31/genuary-2021.html">&lt;p&gt;&lt;a href=&quot;http://genuary.art/&quot;&gt;Genuary&lt;/a&gt; is a generative art challenge that happens every January. People follow a series of prompts using the coding language of their choice (or occasionally no code at all!), and post the results on Twitter, Instagram, or other social media. It‚Äôs a really fun experience and a great way to find other coders and artists who are interested in generative art techniques.&lt;/p&gt;

&lt;p&gt;I participated in Genuary for the first time in 2021, and completed 27 of the 31 &lt;a href=&quot;https://genuary2021.github.io/prompts&quot;&gt;prompts&lt;/a&gt; before running out of steam. Most of my art pieces were created using p5.js and are posted on &lt;a href=&quot;https://openprocessing.org/user/172946/?view=sketches#activity&quot;&gt;OpenProcessing&lt;/a&gt;. This was my first time using p5.js (I had only used Processing in Java in the past) so it was a fun learning exercise. Below are examples of my output for each of the prompts, with a link to the code I wrote for each one.&lt;/p&gt;

&lt;h3 id=&quot;1&quot;&gt;1.&lt;/h3&gt;
&lt;p&gt;Prompt:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;div class=&quot;code-inline&quot;&gt;// TRIPLE NESTED LOOP&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day01.png&quot; alt=&quot;A grid of 25 shapes, each one made up of a circle surrounded by a ring of triangles, in various shades of pink and purple that get more vibrant from left to right.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1051711&quot;&gt;Day 1 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;2&quot;&gt;2.&lt;/h3&gt;

&lt;p&gt;Prompt: Rule 30 (elementary cellular automaton)&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day02.png&quot; alt=&quot;A geometric pattern of white-outlined triangles filling a diamond shape in the center of the canvas, on a background of iridescent-looking dark purple.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1051727&quot;&gt;Day 2 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3&quot;&gt;3.&lt;/h3&gt;

&lt;p&gt;Prompt: Make something human.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day03.png&quot; alt=&quot;A very basic drawing of a person with blue hair, an orange shirt, and a purple background. Text above the person reads 'Hello my name is Mundefined'.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image above is not actually the final output of my code for Day 3‚Äôs prompt (to see the final version you can go to the OpenProcessing sketch linked below). It is a screenshot of an error that occurred while I was testing my code. I was trying to generate names by combining parts of other names (e.g. Jim + Timothy = Jimothy), but ended up referencing a variable that hadn‚Äôt been defined yet, hence the name ‚ÄúMundefined‚Äù. I think the error is actually a better response to the prompt ‚ÄúMake something human‚Äù‚Äì after all, what is more human than making a mistake and finding humor in it? üôÇ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1051825&quot;&gt;Day 3 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4&quot;&gt;4.&lt;/h3&gt;

&lt;p&gt;Prompt: Small areas of symmetry.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day04.png&quot; alt=&quot;Five parallel roads with 5 houses along each road. Each house is a different color and is symmetrical across the vertical axis. The fourth row of houses has sprouted little stick legs and is walking away.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1052152&quot;&gt;Day 4 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;5&quot;&gt;5.&lt;/h3&gt;

&lt;p&gt;Prompt: Do some code golf!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day05.gif&quot; alt=&quot;Small blue dots stream down a dusty blue background, leaving streaks behind them.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code for the above sketch is 279 characters (with no line breaks) and just barely fits in a tweet. Here it is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;frameRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]}}&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;noStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#b4e6e625&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#b4f5f5&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ellipse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;510&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1052815&quot;&gt;Day 5 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;6&quot;&gt;6.&lt;/h3&gt;

&lt;p&gt;Prompt: Triangle subdivision.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day06.png&quot; alt=&quot;A white-outlined eye on a black background, with white lines subdividing the iris into triangles, quadrilaterals, and pentagons, and bright red lines dividing the pupil into triangle or wedge shapes.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1054022&quot;&gt;Day 6 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;7&quot;&gt;7.&lt;/h3&gt;

&lt;p&gt;Prompt: Generate some rules, then follow them by hand on paper.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day07.png&quot; alt=&quot;White text on a black backround that reads: Dragon Instructions Generator (you are the dragon image generator). Draw 3 heads with 2 horns and 1 eye each. Add a thick, four-legged body and dragonfly-like wings. Give your dragon a hoard of hats. Congratulations! You now have a dragon.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And below is my pen-and-paper output for the above instructions:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day07-drawing.jpg&quot; alt=&quot;Drawing of a dragon with 3 heads with 2 horns and 1 eye each, a thick, four-legged body and dragonfly-like wings, with several hats scattered around it.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1058907&quot;&gt;Day 7 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;8&quot;&gt;8.&lt;/h3&gt;

&lt;p&gt;Prompt: Curve only.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day08.png&quot; alt=&quot;A background of gauzy mostly-transparent overlapping red shapes, with several curved black lines in the center of the canvas.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1070367&quot;&gt;Day 8 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;9&quot;&gt;9.&lt;/h3&gt;

&lt;p&gt;Prompt: Interference patterns.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day09.png&quot; alt=&quot;Two sets of expanding concentric circles, one purple and one pink, which intersect in the middle of a black canvas.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1070409&quot;&gt;Day 9 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;10&quot;&gt;10.&lt;/h3&gt;

&lt;p&gt;Prompt:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;div class=&quot;code-inline&quot;&gt;// TREE&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day10.gif&quot; alt=&quot;A basic drawing of a tree that starts with a very small mass of green leaves and slowly grows and extends more leaves.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1070438&quot;&gt;Day 10 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;11&quot;&gt;11.&lt;/h3&gt;

&lt;p&gt;Prompt: Use something other than a computer as an autonomous process (or use a non-computer random source).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day11.jpg&quot; alt=&quot;Photo of graph paper with some lines drawn in black marker that connect together at right angles, with some spaces filled in by multiple colors of colored pencil.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this one I picked some starting points on graph paper and used various D&amp;amp;D dice mod 4 to determine what direction to go in next. Then I chose colors to fill in the spaces by mixing a bag of colored pencils and choosing one randomly.&lt;/p&gt;

&lt;h3 id=&quot;12&quot;&gt;12.&lt;/h3&gt;

&lt;p&gt;Prompt: Use an API (e.g. the weather).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day12.png&quot; alt=&quot;A yellow background with diagonal lime green parallel lines extending from the lower left.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this one, I used a bot that I had been working on which takes the current Milwaukee temperature, windspeed, etc. and generates an abstract image by choosing colors and shapes that change depending on that data. It‚Äôs still a work in progress and I haven‚Äôt posted the code for it yet, but you can see it tweeting at &lt;a href=&quot;https://twitter.com/WeatherPicsMKE&quot;&gt;@WeatherPicsMKE&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;h3 id=&quot;13&quot;&gt;13.&lt;/h3&gt;

&lt;p&gt;Prompt: Do not repeat.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day13.png&quot; alt=&quot;A black background with a grid made up of Pacman shapes in different rotations that start as light blue and gradually turn yellow, bright red, dark blue, and then light blue from top to bottom.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1075742&quot;&gt;Day 13 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;14&quot;&gt;14.&lt;/h3&gt;

&lt;p&gt;Prompt:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;div class=&quot;code-inline&quot;&gt;// SUBDIVISION&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day14.png&quot; alt=&quot;A rectangle in shades of yellow and orange, framed and subdivided by thick black lines to create a geometric stained glass effect.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1075844&quot;&gt;Day 14 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;15&quot;&gt;15.&lt;/h3&gt;

&lt;p&gt;Prompt: Let someone else decide the general rules of your piece.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day15.png&quot; alt=&quot;A black background with 5 cubes, each one outlined in white and with a white front-facing face, and brightly colored striped side faces.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I let my sister Sally decide the rules for this piece. She said it had to have shapes with more than five sides. I chose hexagons/cubes (depending on whether you look at them as 2D or 3D shapes).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1077782&quot;&gt;Day 15 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;16&quot;&gt;16.&lt;/h3&gt;

&lt;p&gt;Prompt: Circles only&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day16.png&quot; alt=&quot;A grid of concentric circles on a white background, where each of the sets of circles has varying sizes and all use the colors black, white, yellow, red, and blue.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This one is heavily inspired by the works of Piet Mondrian.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083096&quot;&gt;Day 16 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;17&quot;&gt;17.&lt;/h3&gt;

&lt;p&gt;Prompt: Draw a line, pick a new color, move a bit.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day17.png&quot; alt=&quot;Pink and purple lines radiate out from the center of the piece, forming a sort of half-heart shape that is reflected across a diagonal axis, with brighter tones in the center and darker tones towards the edges.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083642&quot;&gt;Day 17 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;18&quot;&gt;18.&lt;/h3&gt;

&lt;p&gt;Prompt: One process grows, another process prunes.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day18.gif&quot; alt=&quot;Pastel dots appear on a white background; first just a few, then more, in random locations around the center.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083668&quot;&gt;Day 18 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;19&quot;&gt;19.&lt;/h3&gt;

&lt;p&gt;Prompt: Increase the randomness along the Y-axis.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day19.png&quot; alt=&quot;A grid where in each square, there is a purple background and a black line. From the top to the bottom of the image, there is more variation in the shade of purple and the line has a stronger curve.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083729&quot;&gt;Day 19 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;20&quot;&gt;20.&lt;/h3&gt;

&lt;p&gt;Prompt: No loops.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day20.png&quot; alt=&quot;A simple image of a sword with a green handle on a black background.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083754&quot;&gt;Day 20 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;21&quot;&gt;21.&lt;/h3&gt;

&lt;p&gt;Prompt:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;DRAW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day21.png&quot; alt=&quot;A series of overlapping circles of various rainbow colors that expand out from the center like petals of a flower.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083772&quot;&gt;Day 21 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;22&quot;&gt;22.&lt;/h3&gt;

&lt;p&gt;Prompt: Draw a line. Wrong answers only.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day22.png&quot; alt=&quot;A black x-y axis on a white background, where towards the center the lines become thicker and have curved or spiky edges.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This image is composed of 0 lines and 5000 circles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083801&quot;&gt;Day 22 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;23&quot;&gt;23.&lt;/h3&gt;

&lt;p&gt;Prompt: #264653, #2a9d8f, #e9c46a, #f4a261, #e76f51, no gradients. Optionally, you can use a black or white background.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day23.png&quot; alt=&quot;A grid of many small circles, triangles, and squares in shades of orange, yellow, and turquoise.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083808&quot;&gt;Day 23 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;24&quot;&gt;24.&lt;/h3&gt;

&lt;p&gt;Prompt: 500 lines.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day24.png&quot; alt=&quot;A 10 by 10 grid where each square has a background of various pastel colors arranged in a rainbow gradient, and with 5 black horizontal lines in each square that are staggered to produce a slight optical illusion of movement.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083826&quot;&gt;Day 24 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;25&quot;&gt;25.&lt;/h3&gt;

&lt;p&gt;Prompt: Make a grid of permutations of something.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day25.png&quot; alt=&quot;A black and white grid where each square contains a venn diagram of two semi-transparent circles that are either blue, purple, orange, or yellow.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083840&quot;&gt;Day 25 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;26&quot;&gt;26.&lt;/h3&gt;
&lt;p&gt;Prompt: 2D Perspective.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day26.png&quot; alt=&quot;A black background with a white 3D grid and horizon line. In the foreground is a shape made up of two colorfully striped translucent cubes that extend diagonally and form a plaid effect in the center where they overlap.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083863&quot;&gt;Day 26 Code&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;27&quot;&gt;27.&lt;/h3&gt;

&lt;p&gt;Prompt: Monochrome gradients without lines.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;full-width-blog-img&quot; src=&quot;/assets/images/genuary-2021/day27.png&quot; alt=&quot;A blue and black symmetrical curved gradient formed by horizontal rows of blue circles that reduce in size toward the center left and right of the piece.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://openprocessing.org/sketch/1083885&quot;&gt;Day 27 Code&lt;/a&gt;&lt;/p&gt;</content><author><name>Emma Juettner</name></author><summary type="html">A collection of the generative art I made for the #genuary2021 challenge.</summary></entry><entry><title type="html">Tracery Twitter Bots Tutorial</title><link href="/2020/02/14/tracery_twitter_bot_tutorial.html" rel="alternate" type="text/html" title="Tracery Twitter Bots Tutorial" /><published>2020-02-14T00:00:00-06:00</published><updated>2020-02-14T00:00:00-06:00</updated><id>/2020/02/14/tracery_twitter_bot_tutorial</id><content type="html" xml:base="/2020/02/14/tracery_twitter_bot_tutorial.html">&lt;p&gt;This tutorial teaches the basics of making generative Twitter bots using Tracery and Cheap Bots Done Quick. It was originally presented for the Lake Forest College Computer Science Club in 2019. No coding experience required!&lt;/p&gt;

&lt;h3 id=&quot;what-are-twitter-bots&quot;&gt;What are Twitter bots?&lt;/h3&gt;
&lt;p&gt;Bots on Twitter range from very simple to very complex. They can generate stories, poems, pieces of art, jokes, and more. If you want to learn more about the many types of bots out there, a good resource is &lt;a href=&quot;https://botwiki.org/&quot;&gt;Botwiki&lt;/a&gt;, which collects examples of bots along with tutorials, essays, and other resources. For this tutorial, we‚Äôll focus on bots made with Tracery, a generative tool that‚Äôs easy for beginners to pick up. Here are a few examples of bots I‚Äôve made with Tracery:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/unicode_faces&quot;&gt;@unicode_faces&lt;/a&gt; - a bot that makes faces using Unicode characters&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/XFilesPlotBot&quot;&gt;@XFilesPlotBot&lt;/a&gt; - a bot that comes up with new &lt;em&gt;X Files&lt;/em&gt; plots&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/cs_club_img_bot&quot;&gt;@cs_club_img_bot&lt;/a&gt; - a bot that tweets captioned images of my family‚Äôs cat&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tracery.io&quot;&gt;Tracery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cheapbotsdonequick.com&quot;&gt;Cheap Bots Done Quick (CBDQ)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don‚Äôt have to install anything for this tutorial. It can all be done online!&lt;/p&gt;

&lt;h3 id=&quot;tracery-overview&quot;&gt;Tracery Overview&lt;/h3&gt;
&lt;p&gt;Tracery is a tool built for doing basic text generation, MadLibs-style, from a list of lists that you create. (If you‚Äôre familiar with JSON, that‚Äôs what this is, but you don‚Äôt need to know what JSON is to use Tracery.) When you paste your Tracery code into Cheap Bots Done Quick and connect a Twitter account, CBDQ will automatically start generating tweets from your Tracery lists and posting them to Twitter on a schedule that you set. You can make your Tracery code as complex as you like, so there‚Äôs a lot of room to be creative.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://tracery.io/editor&quot;&gt;online Tracery editor&lt;/a&gt; has a helpful visualization tool for keeping track of the parts of your list and how they work together, so I recommend writing your code there rather than in another text editor. Alternately, you can use &lt;a href=&quot;https://atduskgreg.github.io/bother/tracery.html&quot;&gt;this alternate editor&lt;/a&gt;, which may be slightly easier to understand for beginners.&lt;/p&gt;

&lt;h3 id=&quot;tracery-syntax&quot;&gt;Tracery Syntax&lt;/h3&gt;
&lt;p&gt;Start by coming up with a sentence structure that can be varied with different words (think MadLibs!) and then identify the different word types you‚Äôll need to construct that sentence. For this tutorial, I‚Äôll generate some mystery story plot concepts. My basic sentence structure will be: ‚ÄúA [detective] investigates a [crime] in [location].‚Äù&lt;/p&gt;

&lt;p&gt;This structure could generate sentences such as ‚ÄòA little old lady investigates a murder in a quiet English village.‚Äô or ‚ÄòA no-nonsense sheriff investigates a theft in a Western saloon.‚Äô We‚Äôll need to make lists of words to choose from for each of the fill-in-the-blank spots in the original sentence structure. Our lists for this example might be:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;detective: ‚Äúlittle old lady‚Äù, ‚Äúno-nonsense sheriff‚Äù, ‚Äúhard-boiled private eye‚Äù
crime: ‚Äúmurder‚Äù, ‚Äútheft‚Äù, ‚Äúkidnapping‚Äù
location: ‚Äúa quiet English village‚Äù, ‚Äúa Western saloon‚Äù, ‚Äúa space station‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Tracery, you put the name of the list in quotation marks, followed by a colon, and then put the list items in a set of brackets, with each item within quotation marks. When you want to randomly pick an item from another list, use this notation: &lt;span class=&quot;code-inline&quot;&gt;#list_name#&lt;/span&gt;. Each list should be on a separate line, and should be followed by a comma (except the last one). The first list is your main structure, and it should be named ‚Äòorigin‚Äô. Take a look at the example code below to see this structure in action.&lt;/p&gt;

&lt;p&gt;Example code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A #detective# investigates a #crime# in #location#.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;detective&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;little old lady&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-nonsense sheriff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hard-boiled private eye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;crime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;murder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;theft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kidnapping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a quiet English village&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a Western saloon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a space station&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Example output:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;div class=&quot;code-inline&quot;&gt;A no-nonsense sheriff investigates a kidnapping in a quiet English village.&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Important note&lt;/strong&gt;: Tracery is very picky about commas and new lines. If the output isn‚Äôt showing up correctly in the editor, go through and triple check that you have a comma after every list except the last one, that each list is on a new line, and that all your quotation marks are in the right places. Writing your code directly in the &lt;a href=&quot;https://tracery.io/editor&quot;&gt;online Tracery editor&lt;/a&gt; helps with this, since the output on the right will update as you type so that you can catch errors as you go.&lt;/p&gt;

&lt;p&gt;You also may have issues when copying and pasting code from other websites. If so, the issue can often be resolved by typing the code out by hand into the editor.&lt;/p&gt;

&lt;h3 id=&quot;saving-variables&quot;&gt;Saving Variables&lt;/h3&gt;
&lt;p&gt;At this point we‚Äôve covered everything you need to make a very basic bot (if you‚Äôd like to skip ahead and put your bot on Twitter, scroll down to ‚ÄúHosting Your Bot‚Äù). But we can add a little more sophistication by saving variables for use later in the sentence, rather than selecting every word randomly. To store a variable, use this notation: &lt;span class=&quot;code-inline&quot;&gt;[variableName:#variableListName#]&lt;/span&gt; at the beginning of the ‚Äòorigin‚Äô list. This will not show up in the output, but it will randomly pick an item from variableListName and save it to variableName. Then, when you want to refer to that variable, use &lt;span class=&quot;code-inline&quot;&gt;#variableName#&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Example Code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[myName:#name#]A #detective# named #myName# investigates a #crime# in #location#. #myName# must solve the case before #event#!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;detective&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;little old lady&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-nonsense sheriff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hard-boiled private eye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;crime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;murder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;theft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kidnapping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a quiet English village&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a Western saloon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a space station&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Terry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a bomb explodes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;the criminal strikes again&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;the world ends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Example Output:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;div class=&quot;code-inline&quot;&gt;A hard-boiled private eye named Terry investigates a theft in a space station. Terry must solve the case before the world ends!&lt;/div&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;modifiers&quot;&gt;Modifiers&lt;/h3&gt;
&lt;p&gt;You may want to modify certain variables by capitalizing them, putting ‚Äòa‚Äô or ‚Äòan‚Äô in front of them, or making them plural or past tense. You can do that by adding modifiers to the variables; for example, &lt;span class=&quot;code-inline&quot;&gt;#name.capitalize#&lt;/span&gt; will pick a random item from the ‚Äòname‚Äô list and capitalize the first letter. You can also create your own modifiers if you know Javascript, but that‚Äôs beyond the scope of this tutorial. Here are some built-in modifiers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;code-inline&quot;&gt;#variable.capitalize#&lt;/span&gt; capitalizes the first letter of variable&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;code-inline&quot;&gt;#variable.capitalizeAll#&lt;/span&gt; capitalizes all letters of variable&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;code-inline&quot;&gt;#variable.a#&lt;/span&gt; adds an ‚Äòa‚Äô or ‚Äòan‚Äô in front of variable&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;code-inline&quot;&gt;#variable.s#&lt;/span&gt; makes variable plural&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;code-inline&quot;&gt;#variable.ed#&lt;/span&gt; makes variable past tense&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: Some of the modifiers may not work properly with words that have irregular froms of the past tense/plural/etc, or if you are creating a bot in a language other than English.&lt;/p&gt;

&lt;p&gt;Example Code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[myName:#name#]A #detective# named #myName# investigates #crime.a# in #location#. #myName# must solve the case before #event#!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;detective&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;little old lady&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-nonsense sheriff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hard-boiled private eye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;crime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;murder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;theft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kidnapping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a quiet English village&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a Western saloon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a space station&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Terry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a bomb explodes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;the criminal strikes again&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;the world ends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Example Output:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;div class=&quot;code-inline&quot;&gt;A hard-boiled private eye named Terry investigates a theft in a space station. Terry must solve the case before the world ends!&lt;/div&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;varying-structure&quot;&gt;Varying Structure&lt;/h3&gt;
&lt;p&gt;You may want your bot to tweet several variations on your subject. For instance, in addition to ‚ÄòA [detective] named [name] investigates a [crime] in [location]. [name] must solve the case before [event]!‚Äô, you might include a structure like ‚ÄòWhen a [crime] occurs in [location], #name# doesn‚Äôt want to take the case. But things get personal when #event#.‚Äô We can do that by creating a list of structures for our bot to pick from, the same way we did with lists of words. Think of it as a MadLib with other MadLibs nested inside it.&lt;/p&gt;

&lt;p&gt;Example Code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[myName:#name#]A #detective# named #myName# investigates #crime.a# in #location#. #myName# must solve the case before #event#!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;When a #crime# occurs in #location#, #name# doesn't want to take the case. But things get personal when #event#.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;detective&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;little old lady&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-nonsense sheriff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hard-boiled private eye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;crime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;murder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;theft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kidnapping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a quiet English village&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a Western saloon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a space station&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Terry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a bomb explodes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;the criminal strikes again&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;the world ends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will choose one of the sentence formats randomly, and populates words randomly from the lists.&lt;/p&gt;

&lt;h3 id=&quot;hosting-your-bot&quot;&gt;Hosting Your Bot&lt;/h3&gt;
&lt;p&gt;At this point, you‚Äôve learned everything necessary to make a text bot using Tracery. You can add more and more lists with more and more items to create fairly complex bots, using just the techniques in this post. When you‚Äôre ready to put your bot onto Twitter, you can move on to this step. (Note: you can also edit your code later, after uploading it to CBDQ.)&lt;/p&gt;

&lt;p&gt;First, &lt;a href=&quot;https://twitter.ocm/i/flow/signup&quot;&gt;create a Twitter account&lt;/a&gt; for your bot to tweet from. Then go to &lt;a href=&quot;https://cheapbotsdonequick.com&quot;&gt;Cheap Bots Done Quick&lt;/a&gt; and log in with that same Twitter account. Copy and paste your Tracery code into the box that says Tracery JSON, and set how often you‚Äôd like your bot to tweet. Click save. Congratulations! You‚Äôve made a Twitter bot!&lt;/p&gt;

&lt;p&gt;If you‚Äôre interested in looking into making Twitter bots that go beyond what Tracery can do, I recommend visiting &lt;a href=&quot;https://botwiki.org/resources/twitterbots/&quot;&gt;Botwiki&lt;/a&gt; for a masterlist of bot resources and tutorials.&lt;/p&gt;</content><author><name>Emma Juettner</name></author><summary type="html">Learn the basics of making generative Twitter bots using Tracery and Cheap Bots Done Quick.</summary></entry><entry><title type="html">Piet Tutorial</title><link href="/2019/04/19/piet_tutorial.html" rel="alternate" type="text/html" title="Piet Tutorial" /><published>2019-04-19T00:00:00-05:00</published><updated>2019-04-19T00:00:00-05:00</updated><id>/2019/04/19/piet_tutorial</id><content type="html" xml:base="/2019/04/19/piet_tutorial.html">&lt;p&gt;(Originally written as a tutorial for the Lake Forest College Computer Science Club.)&lt;/p&gt;

&lt;p&gt;Hi all! Today we‚Äôll be looking at an esoteric programming language called Piet. Esoteric programming languages are languages where the concept or aesthetic of the language is usually more important than the actual functionality or usability (some examples of esoteric languages that we‚Äôve done past CS Club tutorials on are &lt;a href=&quot;http://www.lolcode.org/&quot;&gt;LOLCODE&lt;/a&gt; and &lt;a href=&quot;https://esolangs.org/wiki/Brainfuck&quot;&gt;Brainfuck&lt;/a&gt;). No programming experience is required for this tutorial, although it will be easier if you have an understanding of how a stack works.&lt;/p&gt;

&lt;p&gt;Piet is pretty unique in that the program is an image. Literally, you write code by placing pixels of color on a canvas. It‚Äôs inspired by the works of Piet Mondrian, who was famous for his paintings involving blocks of bright color. Today we‚Äôll be learning the basics of Piet!&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources:&lt;/h2&gt;

&lt;p&gt;1) A &lt;a href=&quot;http://www.dangermouse.net/esoteric/piet.html&quot;&gt;good intro&lt;/a&gt; to the language written by its creator; it explains how the syntax works and has links to some examples&lt;/p&gt;

&lt;p&gt;2) An &lt;a href=&quot;https://gabriellesc.github.io/piet/&quot;&gt;online editor&lt;/a&gt; for Piet&lt;/p&gt;

&lt;p&gt;3) An &lt;a href=&quot;https://www.ascii-code.com&quot;&gt;ASCII table&lt;/a&gt; to help you print out characters&lt;/p&gt;

&lt;p&gt;Let‚Äôs start out by making our first program! Because of the way Piet works, there‚Äôs a lot of different ways to implement any given program (you can see some different examples of fancy Hello World programs in the first link above). I‚Äôll show a very simple example program, but see if you can create your own variations!&lt;/p&gt;

&lt;p&gt;Before we start, you‚Äôll need to be familiar with what a stack is. If you aren‚Äôt familiar with this term, think about a stack of books on a table; you can put more books on the top, and take books off the top, but you can‚Äôt access books in the middle of the stack. That‚Äôs how a stack works in computer programming, too. We ‚Äúpush‚Äù things onto the top of the stack, and ‚Äúpop‚Äù them off when we want to use them, but we‚Äôre always accessing the item at the top of the stack.&lt;/p&gt;

&lt;p&gt;I started by listing out the instructions I wanted to perform. Let‚Äôs say I want to print ‚ÄúHi‚Äù. These are the ASCII values I want to print out: 72 105 (you can find these values in the ASCII table linked above). So I need to write a series of instructions that will get me those numbers and then print them out as characters (again, there‚Äôs more than one way to do this). To start, I‚Äôll write this in pseudocode, not an actual Piet program. Here‚Äôs what I came up with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;code-inline&quot;&gt;
push 72&lt;br /&gt;
out(char)&lt;br /&gt;
push 105&lt;br /&gt;
push 1&lt;br /&gt;
pointer&lt;br /&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we need to translate those instructions into pixels (or &lt;strong&gt;codels&lt;/strong&gt;, as Piet calls them). The integers are represented by the number of codels in a particular block of color, and the commands are represented by changes of color. Read the first link above for a detailed explanation and list of commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hi_program.png&quot; alt=&quot;a piet program&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see my program in the above image. Try running it for yourself! There are some codels that I just filled in more or less randomly, since they weren‚Äôt needed for the program.) See if you can understand how it works, and then try to make a full Hello World program on your own. Make sure to test your program frequently; it‚Äôs easy to get mixed up with this language. If you‚Äôre having trouble figuring out how the program flows from one codel to the next, start out by making a program that just goes from left to right. If you want more of a challenge, try designing a program that actually forms a picture of something!&lt;/p&gt;

&lt;p&gt;That‚Äôs all for today! Have fun experimenting with Piet!&lt;/p&gt;</content><author><name>Emma Juettner</name></author><summary type="html">Get started programming with Piet, an esoteric and visually striking programming language.</summary></entry></feed>